version: '3.8'
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: gunicorn dashboard.wsgi:application --bind 0.0.0.0:8000
    ports: ['8000:8000']
    environment:
      - POSTGRES_NAME=postgres_latest
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DEBUG=1
      - SECRET_KEY=foo
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 85.14.6.37 [::1]
    depends_on: [redis, db]
    restart: always

  db:
    image: postgres:16-bookworm
    volumes: [ "./data/db:/var/lib/postgresql/data" ]
    environment:
      - POSTGRES_DB=postgres_latest
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always

  redis:
    image: redis:6-alpine
    restart: always

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A dashboard worker -l info
    volumes: [ ".:/app" ]
    working_dir: /app
    environment:
      - POSTGRES_NAME=postgres_latest
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DEBUG=1
      - SECRET_KEY=foo
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 85.14.6.37 [::1]
    depends_on: [redis, web, db]
    restart: always

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A dashboard beat -l info
    volumes: [ ".:/app" ]
    working_dir: /app
    environment:
      - POSTGRES_NAME=postgres_latest
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DEBUG=1
      - SECRET_KEY=foo
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 85.14.6.37 [::1]
    depends_on: [redis]
    restart: always

  mqtt:
    build:
      context: .
      dockerfile: Dockerfile
    command: python manage.py mymqtt
    volumes: [ ".:/app" ]
    working_dir: /app
    environment:
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 85.14.6.37 [::1]
      - POSTGRES_NAME=postgres_latest
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DEBUG=1
      - SECRET_KEY=foo
    depends_on: [db]
    restart: always

volumes:
  postgres_data:
